from __future__ import print_function, division
from pathlib import Path
from glob import glob
import os
import csv
import SimpleITK as sitk
import numpy as np
import pandas as pd
try:
    from tqdm import tqdm
except:
    tqdm = lambda x: x



def maskCreation(center, diam, z, width, height, spacing, origin):
    mask = np.zeros([height,width])
    voxel_center = (center-origin)/spacing
    voxel_diam = int(diam/spacing[0]+5)
    voxel_xmin = np.max([0,int(voxel_center[0]-voxel_diam)-5])
    voxel_ymin = np.max([0, int(voxel_center[1] - voxel_diam) - 5])
    voxel_xmax = np.min([width-1,int(voxel_center[0]+voxel_diam)+5])
    voxel_ymax = np.min([height-1,int(voxel_center[1]+voxel_diam)+5])

    voxel_xrange = range(voxel_xmin, voxel_xmax+1)
    voxel_yrange = range(voxel_ymin, voxel_ymax+1)

    x_data = [x*spacing[0]+origin[0] for x in range(width)]
    y_data = [x*spacing[1]+origin[1] for x in range(height)]

    for voxel_x in voxel_xrange:
        for voxel_y in voxel_yrange:
            p_x = spacing[0]*voxel_x + origin[0]
            p_y = spacing[1]*voxel_y + origin[1]
            if np.linalg.norm(center-np.array([p_x, p_y, z])) <= diam:
                mask[int((p_y-origin[1])/spacing[1]), int((p_x-origin[0])/spacing[0])] = 1.0
    return mask


def matrix2int16(matrix):

    min= np.min(matrix)
    max= np.max(matrix)
    matrix = matrix-min
    constant = 60000.0
    return np.array(np.rint((matrix-min)/float(max-min) * constant),dtype=np.uint16)



luna_path = "C:\\Users\\vadlamani\\PycharmProjects\luna16\\\dataset\\"
luna_subset_test_path = luna_path+"volumes\\images\subset1\\"
output_path = ".\\dataset\\volumes_modified\\"
file_list = glob(luna_subset_test_path+"*.mhd")



def get_files(file_list, case):
    for f in file_list:
        if case in f:
            return f



df_node = pd.read_csv(luna_path+"annotations.csv")
df_node["file"] = df_node["seriesuid"].map(lambda file_name: get_files(file_list, file_name))
df_node = df_node.dropna()
for fcount, image_file in enumerate(tqdm(file_list)):
    mini_df = df_node[df_node["file"]==image_file]
    if mini_df.shape[0] > 0:
        itk_image = sitk.ReadImage(image_file)
        image_array = sitk.GetArrayFromImage(itk_image)
        num_z, height, width = image_array.shape
        spacing = np.array(itk_image.GetSpacing())
        origin = np.array(itk_image.GetOrigin())
        for node_idx, currentRow in mini_df.iterrows():
            node_z = currentRow["coordZ"]
            node_y = currentRow["coordY"]
            node_x = currentRow["coordX"]
            diam = currentRow["diameter_mm"]
            masks = np.ndarray([3, height, width], dtype=np.uint8)
            center = np.array([node_x, node_y, node_z])
            images = np.ndarray([3, height, width], dtype=np.float32)
            voxel_center = np.rint((center-origin)/spacing)
            for i, i_z in enumerate(np.arange(int(voxel_center[2])-1,
                             int(voxel_center[2])+2).clip(0, num_z-1)):
                mask = maskCreation(center, diam, i_z*spacing[2]+origin[2],
                                 width, height, spacing, origin)
                masks[i] = mask
                images[i] = image_array[i_z]
            np.save(Path(os.path.join(output_path, "images_%04d_%04d.npy" % (fcount, node_idx))), images)
            np.save(Path(os.path.join(output_path, "masks_%04d_%04d.npy" % (fcount, node_idx))), masks)
